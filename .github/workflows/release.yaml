name: Build and Publish release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Rust ${{ matrix.os }} ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registy
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registy-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        name: show rustfmt version
        with:
          command: fmt
          args: --version
      - uses: actions-rs/cargo@v1
        name: run rustfmt check
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        name: show clippy version
        with:
          command: clippy
          args: --version
      - uses: actions-rs/cargo@v1
        name: run clippy check
        with:
          command: clippy
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --all-features
        continue-on-error: ${{ matrix.rust == 'nightly' }}

  build-release:
    name: Build Release
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: windows
            os: ubuntu-latest
            rust: nightly
            target: x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registy
        if: matrix.build == 'macos' || matrix.build == 'windows'
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registy-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        if: matrix.build == 'macos' || matrix.build == 'windows'
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        if: matrix.build == 'macos' || matrix.build == 'windows'
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: Setup Rust
        if: matrix.build == 'macos' || matrix.build == 'windows'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target }}
      - name: Build release binary (Windows, macos)
        if: matrix.build == 'macos' || matrix.build == 'windows'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}
          use-cross: true
      - name: Build relese binary (Ubuntu)
        if: matrix.build == 'linux'
        run: docker run --rm -v $(pwd):/home/rust/src ekidd/rust-musl-builder:latest ./entrypoint.sh
      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/ojichat-rs"
      - name: Build archive
        shell: bash
        run: |
          zip --junk-paths ojichat-rs-${{ matrix.target }} target/${{ matrix.target }}/release/ojichat-rs{,.exe}
      - uses: actions/upload-artifact@v1
        with:
          name: build-${{ matrix.target }}
          path: ojichat-rs-${{ matrix.target }}.zip

  create-release:
    name: Create Release
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - run: |
          echo '${{ steps.create-release.outputs.upload_url }}' > release_upload_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: create-release
          oath: release_upload_url.txt

  upload-release:
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: windows
            os: ubuntu-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: create-release
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat create-release/release_upload_url.txt)"
      - uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.target }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./build-${{ matrix.target }}/ojichat-rs-${{ matrix.target }}.zip
          asset_name: ojichat-rs-${{ matrix.target }}.zip
          asset_content_type: application/zip

  publish_crate:
    name: publish_crate
    if: github.event_name == 'push'
    needs: [upload-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
        name: publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        with:
          command: publish
